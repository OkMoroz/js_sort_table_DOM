{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,IAAM,EAAW,EAAG,SAAS,gBAAgB,CAAC,mBACxC,EAAQ,SAAS,aAAa,CAAC,SAE/B,EAAY,CAAC,EAEnB,EAAQ,OAAO,CAAC,SAAC,CAAA,CAAM,CAAvB,EACE,CAAS,CAAC,EAAM,CAAG,CAAA,EAEnB,EAAK,gBAAgB,CAAC,QAAS,WAC7B,IAAM,EAAc,CAAS,CAAC,EAAM,CAEpC,EAAW,EAAO,GAClB,CAAS,CAAC,EAAM,CAAG,CAAC,CAAS,CAAC,EAAM,AACtC,EACF,GAEA,IAAM,EAAa,SAAC,CAAA,CAAe,CAAnC,EACE,IAAM,EAAQ,EAAG,EAAM,gBAAgB,CAAC,OAExC,EAAK,IAAI,CAAC,SAAC,CAAA,CAAG,CAAd,EACE,IAMI,EANE,EAAQ,EAAE,QAAQ,CAAC,EAAc,CAAC,WAAW,CAAC,IAAI,GAClD,EAAQ,EAAE,QAAQ,CAAC,EAAc,CAAC,WAAW,CAAC,IAAI,GAElD,EAAS,WAAW,EAAM,OAAO,CAAC,QAAS,MAAQ,EACnD,EAAS,WAAW,EAAM,OAAO,CAAC,QAAS,MAAQ,EAUzD,OAHE,EAHE,AAAC,MAAM,IAAY,MAAM,GAGlB,EAAO,aAAa,CAAC,GAFrB,EAAS,EAKb,EAAc,EAAS,CAAC,CACjC,GAEA,EAAK,OAAO,CAAC,SAAC,CAAd,EACE,EAAM,WAAW,CAAC,EACpB,EACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar headers = _to_consumable_array(document.querySelectorAll(\"table thead th\"));\nvar tbody = document.querySelector(\"tbody\");\nvar sortOrder = {};\nheaders.forEach(function(item, index) {\n    sortOrder[index] = true;\n    item.addEventListener(\"click\", function() {\n        var isAscending = sortOrder[index];\n        sortColumn(index, isAscending);\n        sortOrder[index] = !sortOrder[index];\n    });\n});\nvar sortColumn = function(indexOfColumn, isAscending) {\n    var rows = _to_consumable_array(tbody.querySelectorAll(\"tr\"));\n    rows.sort(function(a, b) {\n        var cellA = a.children[indexOfColumn].textContent.trim();\n        var cellB = b.children[indexOfColumn].textContent.trim();\n        var valueA = parseFloat(cellA.replace(/[$,]/g, \"\")) || cellA;\n        var valueB = parseFloat(cellB.replace(/[$,]/g, \"\")) || cellB;\n        var result;\n        if (!isNaN(valueA) && !isNaN(valueB)) result = valueA - valueB;\n        else result = valueA.localeCompare(valueB);\n        return isAscending ? result : -result;\n    });\n    rows.forEach(function(row) {\n        tbody.appendChild(row);\n    });\n};\n\n//# sourceMappingURL=index.8c6c9321.js.map\n","'use strict';\n\nconst headers = [...document.querySelectorAll('table thead th')];\nconst tbody = document.querySelector('tbody');\n\nconst sortOrder = {};\n\nheaders.forEach((item, index) => {\n  sortOrder[index] = true;\n\n  item.addEventListener('click', () => {\n    const isAscending = sortOrder[index];\n\n    sortColumn(index, isAscending);\n    sortOrder[index] = !sortOrder[index];\n  });\n});\n\nconst sortColumn = (indexOfColumn, isAscending) => {\n  const rows = [...tbody.querySelectorAll('tr')];\n\n  rows.sort((a, b) => {\n    const cellA = a.children[indexOfColumn].textContent.trim();\n    const cellB = b.children[indexOfColumn].textContent.trim();\n\n    const valueA = parseFloat(cellA.replace(/[$,]/g, '')) || cellA;\n    const valueB = parseFloat(cellB.replace(/[$,]/g, '')) || cellB;\n\n    let result;\n\n    if (!isNaN(valueA) && !isNaN(valueB)) {\n      result = valueA - valueB;\n    } else {\n      result = valueA.localeCompare(valueB);\n    }\n\n    return isAscending ? result : -result;\n  });\n\n  rows.forEach((row) => {\n    tbody.appendChild(row);\n  });\n};\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","headers","document","querySelectorAll","tbody","querySelector","sortOrder","forEach","item","index","addEventListener","isAscending","sortColumn","indexOfColumn","rows","sort","a","b","result","cellA","children","textContent","trim","cellB","valueA","parseFloat","replace","valueB","isNaN","localeCompare","row","appendChild"],"version":3,"file":"index.8c6c9321.js.map"}